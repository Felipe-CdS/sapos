<%
  scope = field.object_name["record".size..]
  column = StudentsController.active_scaffold_config.columns[student_field]

  old_controller = controller
  controller = StudentsController.new
  filled_field_mode = :value
  student = Student.new
  student[student_field] = field.object[filled_field_mode]
  options = active_scaffold_input_options(column, scope, :object => student)
  options[:name] = options[:name][..-(student_field.to_s).size-2] + filled_field_mode.to_s + "]"
  options[:required] = configuration["required"] ? true : false
  options[:class] = filled_class
%>

<li class="form-element <%= configuration["required"] ? "required" : "" %>">
  <dl>
    <dt>
      <%= field.label :value, form_field.name, for: options[:id] %>
      <% if form_field.description.present? %>
        <span class="filled-form-description"><%= form_field.description %></span>
      <% end %>
    </dt>
    <dd>
      <%= active_scaffold_input_for column, scope, options %>
    </dd>
  </dl>
</li>

<% controller = old_controller %>

<script>
$(document).ready(function() {

  <% if column.form_ui == :date_picker %>
    function validateDateField(value) {
      if (!value) {
        return "";
      }
      const regex = /^(\d{1,2})\/(\d{1,2})\/(\d{2,4})$/;
      groups = value.match(regex)
      if (!groups || isNaN(Date.parse(`${groups[3]}-${groups[2]}-${groups[1]}`))) {
        return `<%= form_field.name %> <%= I18n.t(
          "activerecord.errors.models.admissions/filled_form_field.invalid_date",
        ) %>`
      }
      return "" ;
    }

    window.customFormValidations["<%= filled_class %>"].push(function() {
      let input = $(`#<%= options[:id] %>`).get(0);
      if (input.disabled) {
        return true;
      }
      error_msg = validateDateField($(input).val());
      input.setCustomValidity(error_msg);
      if (error_msg != "") {
        input.reportValidity()
        return false;
      }
      return true;
    })
  <% end %>

});
</script>
